package xmlPushpa;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class XmlRemove {
	private static final String OUTPUT_XML = "output.xml";
	private static final String INPUT_XML = "input.xml";
	private static final String CONF_ITEM = "CONF-ITEM";
	private static final String DSM = "dsm";
	private static final String SHORT_NAME = "SHORT-NAME";

	public static void main(String[] args) {
		File xmlfile = new File(INPUT_XML);
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		if (xmlfile.exists()) {
			System.out.println("xml file is present");
		}
		try {
			dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(xmlfile);
			deleteElement(doc);
			doc.getDocumentElement().normalize();
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(new File(OUTPUT_XML));
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			transformer.transform(source, result);
			System.out.println("xml file updated successfully");
		} catch (SAXException | ParserConfigurationException | IOException | TransformerException e1) {
			System.out.println("Exception occured while removing the xml element.");
			e1.printStackTrace();
		}
	}

	private static void deleteElement(Document doc) {
		NodeList confitem = doc.getElementsByTagName(CONF_ITEM);
		for (int i = 0; i < confitem.getLength(); i++) {
			Node node = confitem.item(i);
			Element confelement = (Element) node;
			NodeList nodeL = confelement.getElementsByTagName(SHORT_NAME);
			if (node.getNodeType() == Document.ELEMENT_NODE && DSM.equalsIgnoreCase(nodeL.item(0).getTextContent())) {
				System.out.println("ready to remove ");
				node.getParentNode().removeChild(confelement);
			}
		}
	}
}
