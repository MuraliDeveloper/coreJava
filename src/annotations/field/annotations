
1) Instructions to the compiler: 
	(@Deprecated, @Override & @SuppressWarnings) that can be used for giving certain instructions to the compiler. For example the @override annotation is used for instructing compiler that the annotated method is overriding the method. More about these built-in annotations with example is discussed in the next sections of this article.

2) Compile-time instructors: 
  generating code, XML files etc.

3) Runtime instructions: 
We can define annotations to be available at runtime which we can access using java reflection and can be used to give instructions to the program at runtime. 


Builtin : @Override    @Deprecated  @SuppressWarnings 


Marker Annotation
@interface MyAnnotation{}  


Single-Value Annotation
@interface MyAnnotation{  
int value();  
}  



@interface MyAnnotation{  
int value() default 0;  
}  


@interface MyAnnotation{  
int value1();  
String value2();  
String value3();  
}  
}  
@MyAnnotation(value1=10,value2="aadadad",value3="adadadada")  


Built-in Annotations used in custom annotations in java

@Target

TYPE	class, interface or enumeration
FIELD	fields
METHOD	methods
CONSTRUCTOR	constructors
 

Ex:
@Target(
{
ElementType.TYPE, 
ElementType.FIELD, 
ElementType.METHOD})
@interface MyAnnotation{  
int value1();  
String value2();  
}  



@Retention

RetentionPolicy.SOURCE	refers to the source code, discarded during compilation. It will not be available in the compiled class.
RetentionPolicy.CLASS	refers to the .class file, available to java compiler but not to JVM . It is included in the class file.
RetentionPolicy.RUNTIME	refers to the runtime, available to java compiler and JVM .

Ex:
1.

@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.TYPE)  
@interface MyAnnotation1{  
int value1();  
String value2();  
}  


2.
@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.METHOD)  
@interface MyAnnotation2{  
int value();  
}  




@Inherited

@Inherited  
@interface ForEveryone { }//Now it will be available to subclass also  
  
@interface ForEveryone { }  
class Superclass{}  
  
class Subclass extends Superclass{}  


@Documented




/Creating annotation  
import java.lang.annotation.*;  
import java.lang.reflect.*;  
  
@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.METHOD)  
@interface MyAnnotation{  
int value();  
}  
  



1. Create the annotation                     -> Framework
2.Apply the annotations for Person , User , Product:       -> Developer
3.Read the annotation Values         -> Framework
 Use the Reflection API
 using the class get the annotation value
4.Validate the data with the annotated size      -> Framework





