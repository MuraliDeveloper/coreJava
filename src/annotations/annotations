Example:

public interface RBI {
	 	public abstract void createAccount() ;
}



public class Hdfc implements RBI {

	@Override  // this is an annotation
	public void createAccount() {
		// TODO Auto-generated method stub
		
	}
  
}

annotations:
-------------
- to specify configuration
- is used by frameworks like hibernate,springs


Create a Annotation          -> Frameowrk
Use/Apply the annotation     -> Developer
  
  
  
  
1) Instructions to the compiler: 
	(@Deprecated, @Override & @SuppressWarnings) that can be used for giving certain instructions to the compiler. For example the @override annotation is used for instructing compiler that the annotated method is overriding the method. More about these built-in annotations with example is discussed in the next sections of this article.

2) Compile-time instructors: 
  generating code, XML files etc.

3) Runtime instructions: 
We can define annotations to be available at runtime which we can access using java reflection and can be used to give instructions to the program at runtime. 


Builtin : @Override    @Deprecated  @SuppressWarnings 

where can we specify annotation:
-class
-Instance variable
-method
-Constructor


how to create annotation?
-----------------------------------------------------------
@interface Config{
  <some attribute specification here>
} 

 Case#1: Marker Annotation
-------------------------------------------------------
1.Create annotation
	
  Config.java:
  @interface Config{  // here Config is the annotation name

  }  
  
2.Apply the annotation

	public class Emp{  
  
    @Config
  	String id;
    
    @Config
    String name;
  
  }


Case#2:
-------------------------------------------------------
1.Create annotation
	 
   @interface Size{   //Here Size is the annotation , 
			int min();       // min is the attribute, specifying min is mandatory
		}  	
	
2.Apply the annotation
	public class Emp{  
  
    @Size ( min=10) 
  	String id;
    
    @Size ( min =8)
    String name;
  
  }


Case#3:
-------------------------------------------------------
1.Create annotation

	@interface range{    // here range is the annotaion
		int value() default 0;   // value is the attribute , specifying the value is optional
	} 
  
2.Apply the annotation
	
  public class Emp{  
  
    @range ( value=5) 
  	String id;
    
    @range  
    String name;
  
  }


Case#4:
---------------------------------------------------------------
1.Create annotation
	@interface Config{    // Config is the  annotation
			int min();  
			String value1();  
			String value2();    // min, value1 , value2 are attributes  and all attributes are mandatory
	}  
 
2.Apply the annotation
	
  public class Emp{ 
  
   @Config( min=5 ,value1 ="test1" , value2 ="test2" ) 
   String id;
  
  }




Case#5:
---------------------------------
Can we apply multiple annotations?
Yes

1.Create annotation

	@interface range{    // here range is the annotation
		int value()    // value is the attribute  
	} 
	
	
	@interface Config{    // Config is the  annotation
		int min();   // min is the attribute  
	}
  
  
 2.Apply the annotation
	
  public class Emp{ 
  
   @range( value= 5)
   @Config(min = 10)
   String id;
  
  } 
  
  
  

For creating a annotations we need to specify:
-------------------------------------------------------  
1.@Target - mandatory
2.@Retention - mandatory
3.@Inherited
4.@Documented


Syntax:

@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.METHOD)  
@Inherited
@Documented
@interface Config{    //here Config is the annotation 
	int value();   // value is the attribute
}  
 

Built-in Annotations used in custom annotations in java

 
@Target  [ where annotation can be applied ] 
------------------------------------------------------------------------

TYPE	class, interface or enumeration
FIELD	fields/insancde variables
METHOD	methods
CONSTRUCTOR	constructors
 

Ex:
@Target(
{
ElementType.TYPE, 
ElementType.FIELD, 
ElementType.METHOD})
@interface MyAnnotation{  
int value1();  
String value2();  
}  


@MyAnnotation(value1="abc", value2="xyz")
public class Emp
{
@MyAnnotation(value1="efg", value2="ijk")
 int id;
 
 @MyAnnotation(value1="lmn", value2="opq")
 public void check(){
 }

}

@Retention
--------------------------------------------------------------------------------------

RetentionPolicy.SOURCE	refers to the source code, discarded during compilation. It will not be available in the compiled class.
RetentionPolicy.CLASS	refers to the .class file, available to java compiler but not to JVM . It is included in the class file.
RetentionPolicy.RUNTIME	refers to the runtime, available to java compiler and JVM .

Ex:
1.

@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.TYPE)  
@interface MyAnnotation1{  
int value1();  
String value2();  
}  


2.
@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.METHOD)  
@interface MyAnnotation2{  
int value();  
}  




@Inherited

@Inherited  
@interface ForEveryone { }//Now it will be available to subclass also  
  
@interface ForEveryone { }  
class Superclass{}  
  
class Subclass extends Superclass{}  


@Documented




/Creating annotation  
import java.lang.annotation.*;  
import java.lang.reflect.*;  
  
@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.METHOD)  
@interface MyAnnotation{  
int value();  
}  
  
//Applying annotation  
