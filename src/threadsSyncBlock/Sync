synchronized:
 when one object/variable is shared across multiple threads;
 and every thread is trying to modify same object/variable ====> data inconsistency.
 
  
Solution:
use synchronized block
use synchronized method

synchronized -> will ensure at a time ony one thread to execute and other threads are in waiting state.
at a time only one thread should modify the object/variable. 
 
 
 
 -synchronized method : locks the entire methods. other threads has to be in waiting state
 -synchronized  block : it will not lock entire method ; it locks only small porting inside the method.
 
 
 synchronized method:
 --------------------------------------------------------------------------
  public synchronized void run() {
		try {
			Thread.sleep(7000);
			person.count = person.count + 5;
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
 This will lock all the lines inside the run method ; 
 at a time only one thread will execute run method
 this leads to Performance issue.
 
 
 synchronized block:
 --------------------------------------------------------------------------
 public void run() {
		try {
			Thread.sleep(7000);
			synchronized (person) {
				person.count = person.count + 5;
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
This will not lock all the lines inside the run method ; 
only the line "person.count = person.count + 5;" is executed one thread at a time.



Vector is synchronized ; all methods in vector are synchronized.
sharing vector to multiple threads is safe

ArrayList is not synchronized 
sharing ArrayList to multiple threads is not safe

	
