
Streams:
---------------------------
This new functionality – java.util.stream – supports functional-style operations on streams of elements, such as map-reduce transformations on collections.
- applied on collections/ data structures.

stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
Streams don’t change the original data structure, they only provide the result as per the pipelined methods.

Different Operations On Streams
----------------------
1.Intermediate Operations
2.Terminal Operations


Different Operations On Streams-
Intermediate Operations:[ returns a stream as result]
------------------------------------------------------
Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined. 
- intermediate operations can be chained
- lazily loaded and are actually not executed, they are just stored in memory
filter()
map()
distinct()
sorted()
limit()
skip()




Terminal Operations:[ returns non stream like primitive or obj or collection]
-------------------------------------------------------------------------
Terminal operations mark the end of the stream and return the result.
- terminal operations cannot be chained, and terminal operation will be at end of pipeline
- only one terminal operation is applied at a time
- terminal operation is called on final stream
- terminal operation gives the final result

forEach()
toArray()
reduce()
collect()
min()
max()
count()
findfirst()
anymatch()
allmatch()
nonematch()
findany()





map: The map method is used to returns a stream consisting of the results of applying the given function to the elements of this stream.

List number = Arrays.asList(2,3,4,5);
List square = number.stream().map(x->x*x).collect(Collectors.toList());
filter: The filter method is used to select elements as per the Predicate passed as argument.
List names = Arrays.asList("Reflection","Collection","Stream");
List result = names.stream().filter(s->s.startsWith("S")).collect(Collectors.toList());
sorted: The sorted method is used to sort the stream.
List names = Arrays.asList("Reflection","Collection","Stream");
List result = names.stream().sorted().collect(Collectors.toList());






collect: The collect method is used to return the result of the intermediate operations performed on the stream.
List number = Arrays.asList(2,3,4,5,3);
Set square = number.stream().map(x->x*x).collect(Collectors.toSet());
forEach: The forEach method is used to iterate through every element of the stream.
List number = Arrays.asList(2,3,4,5);
number.stream().map(x->x*x).forEach(y->System.out.println(y));
reduce: The reduce method is used to reduce the elements of a stream to a single value.
The reduce method takes a BinaryOperator as a parameter.
List number = Arrays.asList(2,3,4,5);
int even = number.stream().filter(x->x%2==0).reduce(0,(ans,i)-> ans+i);

