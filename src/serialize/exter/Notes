Externalization is used whenever we need to customize serialization mechanism.
 If you want to serialize only part of an object, then Externalization is the best option. 
 You will have to serialize only required fields of an object.
 The methods, readExternal() and writeExternal() are defined by the Externalizable interface.
 
 
 // to read object from stream
void readExternal(ObjectInput in) 

// to write object into stream
void writeExternal(ObjectOutput out) 


Key differences between Serializable and Externalizable 
 

Implementation : Unlike Serializable interface which will serialize the variables in object with just by implementing interface, here we have to explicitly mention what fields or variables you want to serialize.
Methods : Serializable is marker interface without any methods. Externalizable interface contains two methods: writeExternal() and readExternal().
Process: Default Serialization process will take place for classes implementing Serializable interface. Programmer defined Serialization process for classes implementing Externalizable interface.
Backward Compatibility and Control: If you have to support multiple versions, you can have full control with Externalizable interface. You can support different versions of your object. If you implement Externalizable, it’s your responsibility to serialize super class.
public No-arg constructor: Serializable uses reflection to construct object and does not require no arg constructor. But Externalizable requires public no-arg constructor.



If a class implements an Externalizable interface then, object serialization will be done using writeExternal() method. ..
 
 
 
 Req:
----------
serialize only the few instance variables?

solution:
 1. Class has to implement  Externalizable interface
 2.Override
 // to read object from stream
void readExternal(ObjectInput in) 
{
	write code which instance variables has to be deseialization
}

// to write object into stream
void writeExternal(ObjectOutput out) 
{
	write code which instance variables has to be seialization
	
}
 
 
