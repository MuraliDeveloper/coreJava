OOPS:
-------
Object Oriented Programming
->Programming style that defines the common rules , regulations,standards , guidelines for writing better programming

-> Programming style
-> ex: java, .net , python , php , groovy ,go , php , javascript , anagular js

Adv:
--------
Modularity
Easy to read and write
Avoids complexity
code Maintainance
future enhancements.

Topics:
-> class, object , enapsulation , abstraction , inheritance, polymorphism.

# Class
--------------------------
 -> Userdefined datatype
-> Class is used to represent the real time entities/structure/model.
ex: Company, Branch , Dep, sub-dept, Project , Employee ,
-> Class doesnt contain any data.
-> class is created before run-time
->class is a logical representation
->class is a template


-> Class is  block for instance variables + functions
    a)instance variables to hold data for entity
    b)function logic would operate on instance variables


 
syntax for a class:
A person is a entity
A Person has id,name and age as properties.


class Person{
  
	int id;
	String name;
	int age;
// here id,name , age are instance variables.
  
	public void  show(){
		System.out.println("hello inside show")
	}
//show is a instance method.

}
	
.......

Object:
---------
 
create a variable for a class  ===> object
ex: create a variable for Person ===> object
->variable for the class
->instance for the class
->object is created during run time .
->when obj is created memory is allocated for all instance variables.
->object has logical + physical representation
Obj is created in heap memory


#Syntax for obj creation
Person p1 = new Person();
Person p2 = new Person();


//here p1 and p2 are  objects.
p1 has seperate memory has id,name,age.
p2 has seperate memory has id,name,age.


#Class will decide property names for all objs
#Obj will decide property values..


#Set data
p1.id =30000;
p1.name ="user1";
p1.age=45;


#display data
System.out.println(p1.id);
System.out.println(p1.name);
System.out.println(p1.age);

#call the method
p1.show();

diff between normal variable and obj?
----------------------------------------------

x = 90

p1= Person()

# x can hold only one value
# p1 can hold multiple varibles.  in this case p1 internally have  3 values



USE "." ON A OBJECT FOR ACCESING THE instance variables and methods.


# instance variables -----> inside class    ---> every time when obj is crated , access with obj
# static/class varibles----> inside class ----> memory allocated 1 time  , access with class


1.Requirement to capture id,name,age for 10 persons.
solution:
without oops we have to create 30 variables
without oops we have to create 10 variables



/*

Class:
-----
-> Class is a user defined data type

-> class is a template, defines structure.
-> class is a logical memory , but not physical memory
-> class represents the real time entity. 
For every entity we need to create class
  ex: Company, Department , Project , Employee , Address
-> Class determines how an obj will behave and what the object will contain.
->Class is a blue print for object creation


 -> Userdefined datatype
-> Class is used to represent the real time entities/structure/model.
-> class is created before run- time
->class is a logical representation 
->class is a template 
-> class doesnt contain any data.

  
-> Class is  block for instance varibles + functions
    a)insatance variables to hold data for entity
    b)funtions would operate on instance varibles  

-> Class has 
       Instance variables + methods
       constructors
       Static variables + static methods + static block


Object:
------------
-> Object is a variable created using Class
-> Object is a instance for the class.
-> when object is created memory is allocated for all the instance variables.
syntax:


Person p = new Person();
Obj is created in heap memory
-> Every obj has state(instance variables) and behavior(methods) 
-> Object has physical memory 
->Object has the real time data

Person p = new Person()
  p has memory for id, name , age

use "." operator on the object to access anthing from the class

Set Data:
----------
p.id =4000
p.name ="user1"
p.age=56
  


Acces data:
-------------
print(p.id)
print(p.name)
print(p.age)


call the funtion:
------------------
p.show()

  
 
*/







