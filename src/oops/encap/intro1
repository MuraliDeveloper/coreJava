Encapsulation & abstraction:
----------------------------
-> Required for better designing the classes.
->Guidelines & common sense for creating class.

Encapsulation:
->Class is a building block for instance variables & methods
-> We need to create one class per entity
-> Class should contain related instance variables + methods


Case#1:
Class Person:
  id, name , age,aadhar
  
Class PersonDetails:
  id,name,age,pan
  
Req: 
-Create a obj and set data for id,name,age, which class should we use?

solution:  
delete any one of the two classes and maintain only one class.
delete PersonDetails class and retain the details  only in person class.

Class Person:
    id,name,age,pan,aadhar






    
Case#2:
Maintain a vehicle show-room .
capture vehicle & customer info.

class Data:
  vehicleId
  vehicelName
  vechicleBrand
  custId
  custName
  custMobile
  
  
If the vehicle comes to show-room then create obj for  Data and set values for vehicleId  +  vehicelName  + vechicleBrand
If the customer comes to show-room then create obj for  Data and set values for custId  + custName + custMobile






Problems:
  1.This class has unrelated instance variables.
  2. Memory wastage
  3. future enhancement and class becomes complex.
  4.Ends up creating one more class or add more unrelated props 



solutions:
  create seperate class for vehicle info
  and create seperate class for customer info

class Vehicle:
  vehicleId
  vehicelName
  vechicleBrand

class Customer:
  custId
  custName
  custMobile  
  
  
  
Case#3:
class Person{
  int id; 
  String name; 
  int age;
  
  void sum(int x, int y){
    print("sum = " , (x+y))
   }
    
}


req: call sum funtion
  Person p = Person()
  p.sum(10,20)


Problem:
  1.Class has unrelated method
  2.Memory waste

  
  solution:
    -> remove sum() futn from Person class

class Cal:
   void sum(x,y):
      print(x+y)
          
  p = Cal()
  p.sum(10,20)
          
