Collections/Data Structures:
--------------------------------
->Is required when we have large group of data.
-> collecting and manipulating a group of objects.
->Operations : searching, sorting, insertion, manipulation, deletion, updation. 
  
Topics:
Arrays , 
List (ArrayList + LinkedList + Vector) 
Set(HashSet + TreeSet +LinkedHashSet) 
Map(HashMap + TreeMap + LinkedHashMap)

java.util -> all the Collection classes.
  

Arrays:
-------
-> Need to specify the size first 
-> Arrays uses index/position based operations. 
-> all operations like insert , update , delete , read are  based on positions.
-> position numbers starts from zero.

syntax:
--------------
 1. Create array for int for size of 5
int[] numbers = new int[5];    // int array with size as 5 , numbers -> is the array.
 numbers array can store 5 elements from 0 position to 4 position

2. Create array for string with size of 6
String[] data = new String[6];  // string array with size of 6  data -> is the array
 data array can store 6 elements from 0 position to 5 position

3. Create array for float with size of 10
float[] nums = new float[10]; // float array with size of 10  nums -> is the array
 nums array can store 10 elements from 0 position to 9 position

4. Create array for person with size of 7
Person[] persons = new Person[7];  
// Person array with size of 7  persons  -> is the array
 persons array can store 7 elements from 0 position to 6 position
 
 
 
  
How to Add data to an array:
----------------------------------
data[0] = "kumar"; // add "kumar" inside an array at position 1
data[1] = "shyam";   // add "shyam" inside an array at position 2
data[5] = "ram";   // add "ram" inside an array at position 6


  
How to Read data from an array:
-------------------------------------
Systm.out.println(data[0]) ;   // prints "kumar" 
Systm.out.println(data[1]) ;   // prints "shyam" 
Systm.out.println(data[5]) ;   // prints "ram" 


How to Update data from an array:
---------------------------------------
data[0] = "kumar varma"; // updates "kumar varma" inside an array at position 1
data[1] = "shyam kumar";   // updates "shyam kumar" inside an array at position 2
data[5] = "ram prasad";   // updates "ram prasad" inside an array at position 6
 
 
 Delete elements is not possible...
 
 
 
 
disadvantages:
-> Specify size early. Fixed length.
-> Size cannot be increased or decreased 
-> insert in between[multiple right shift operations] or remove in between[multiple left shift operations] is costly.
-> search by content is costly


 
 Applications of Arrays
 
 1) Array stores data elements of the same data type.

2) Maintains multiple variable names using a single name. Arrays help to maintain large data under a single variable name. This avoid the confusion of using multiple variables.

3) Arrays can be used for sorting data elements. Different sorting techniques like Bubble sort, Insertion sort, Selection sort etc use arrays to store and sort elements easily.

4) Arrays can be used for performing matrix operations. Many databases, small and large, consist of one-dimensional and two-dimensional arrays whose elements are records.

5) Arrays can be used for CPU scheduling. 

6) Lastly, arrays are also used to implement other data structures like Stacks, Queues, Heaps, Hash tables etc.

 
  