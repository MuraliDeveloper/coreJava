Advantages:
--------------------
-> No need to specify the size
-> we have inbuilt methods for the operations 
-> List is dynamically growing ...
-> List internally uses array
-> Search by position is fast
-> search by content is slow
-> delete an element is slow

-> Insert in between and delete in between is slow



List (interface)
---------------------

 
Child classes:
------------------
  -ArrayList
  -Vector
  -LinkedList


Raw List:
------------------------
List  names= new ArrayList();   // array list that stores and manages any datatype
List  names= new Vector();   // Vector that stores and manages any datatype
List  names= new LinkedList();   // LinkedList that stores and manages any datatype


ArrayList:
----------------------------
-->List<String> names= new ArrayList<>();  // array list that stores and manages only string
-->List<Integer> names= new ArrayList<>();  // array list that stores and manages only Integer
-->List<Float> nums= new ArrayList<>();   // create arraylist for Float
-->List<Person> persons= new ArrayList<>();   // create arraylist for Person


Vector:
-------------
-->List<String> names= new Vector<>();  // Vector that stores and manages only string
-->List<Integer> names= new Vector<>();  // Vector that stores and manages only Integer
-->List<Float> nums= new Vector<>();   // create Vector for Float
-->List<Person> persons= new Vector<>();   // create Vector for Person

 
LinkedList:
-------------
-->List<String> names= new LinkedList<>();  // LinkedList that stores and manages only string
-->List<Integer> names= new LinkedList<>();  // LinkedList that stores and manages only Integer
-->List<Float> nums= new LinkedList<>();   // create LinkedList for Float
-->List<Person> persons= new LinkedList<>();   // LinkedList Vector for Person



Methods(Arraylist/vector/linkedlist): 
-------------------------------------------

List<String> names = new ArrayList<>();


// add new element use add() method
names.add("user1");
names.add("user2");
names.add("user4");


// adds new element at 2nd position
names.add(2, "user5");  

// deletes all elements
names.clear(); 



// search by position . ex: gets the element at 2nd position.
String data = names.get(1);   


 // search by content returns boolean , 
boolean found = names.contains("user4");
if(found) {
			System.out.println("  available");
}else {
			System.out.println( " is not available");
}


// returns boolean to check whether list is empty or not
boolean content = names.isEmpty(); 


// to find size
int count = names.size(); 


// to remove element
names.remove("user2"); 






import java util.Arrays;
List<String> names = Arrays.asList("Cow", "Zebra","Bat", "Apple","Elephant","Mango");
List<Integer> nums = Arrays.asList(10,34,913,34,2,24,365,121,5,2,4,65);