Java?
------
->Platform independence 
  Compile once + Run AnyTime
->Object Oriented LANGUAGE (OOPS):
 ex: Java, .net, python
 :OOPS defines the common rule/regulations/guidelines for writing better progs.
 :Modularity 
 :Reusability
 :Easy to understand and easy to represent any complex model
 :Future enhancements
->Simple,easy to learn/ understand /code..
->Robust:
  No pointers . [gives access to the memory location]
  Memory allocation & meomory dealloca is taken care by java
  Unused memory is cleanup using garbage collection.
  Java is very strong in type checking.  [Compilation]
  Exception hanlding[to handle the unexpected scenarios that occurs at run time]
->Arhitecural neutral:  Java memory alloca is stable for all platforms.
->MultiThreading : To execute multiple progs at the same time. ex: response time.

->Diff apps:
  standalone app/desktop app
  web app
  web services
  enterprise apps
  mobile
  gaming
  Machine learning , AI , ..etc....
  tools : selenium , hybris , oracle ATG, Pega
  frameworks: springs , hibernate





  setup:
-----------
1. download and Install  java8
2. download and install eclipse 
  
https://drive.google.com/drive/folders/1qEYiff8p6216-CFwa_9yu_AF44M8NkQB

3. set path for java jdk path :
open commnad promot and type:
a. javac  -> jdk is available
b. java   -> jre is available

copy the path "C:\Program Files\Java\jdk1.8.0_231\bin"
and add the jdk bin location to the environment variable "path".


once eclipse is opened it will ask for the "workspace".
workspace -> is the location in the syatem where the projects are created
provide the workpsace path and  click on launch.

eclipse:
------------------------
1.create the java project
a java project contains two components:
JRE  -> java library 
src  -> developer has to create/write the code


2.under the project> src  create the package
package -> package is the folder that contains the related java files.
we create seperate package and maintain our files.

3.Under the package create the class

Setup:
-----
  a) Java 8 software  + env variable config
  b) IDE ex: Eclipse, netbeans , Injellij
  
  
  Java: JDK + JRE
  JDK -> Commands + lib for compilations
  JRE -> commands for execution
  
  In every server we hav the application running & testers will do testings on these systems.
  Dev1  --->     TS1    -->    TS2 -->     TS3 -->     PRE-PRD --->     Live  [consumed by customers]   
  12																																					10
  JDK+JRE        JRE          JRE          JRE          JRE              JRE
  
 SET PATH: make the command available every where
  
        
Steps:
1.create java project
2.create package
3.under package create the Java file..
  
  package --> folder that contains the related java files.ex: validate, ui , request , db , txn, security ...
  
    1.Hello.java 

Steps to run java file:
1.Compilation  
  javac Hello.java 
  result: Hello.class is generated[byte code file]
2.Execution 
  java Hello
  result : <some output>       
  
    
jar:    [java archive] - exposing the code 
java library. 
contains multiple .class files
large no files to share with the team , then create jar file that contains .class files.
  
  
    
Structure of java file:
-----------------------------
  Ex1.java
    
  1.package name
  2.import statements
  3. class name
  4.inside a class we can define  
  instance variables + methods + constructr + static variables + static methods + static block...
  
  public class Hello{}


To run a program main() method is mandatory.
  

method or funtion refers the same.

in java the code should be always written inside the method/function.

if a java file has the main method then only it is eligible for running.

syntax for main method:
------------------------------

 public static void main(String[] args) {
 
 }
 
 
 public ->  scope is global so that JRE can access
 static -> defines the method is static
 void -> no return type
 main -> function name or method name
 args -> input arguments 
 
 


