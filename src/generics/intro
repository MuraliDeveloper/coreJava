  Generics:
  -----------------
  List<String> names = new ArrayList<> (); // can add only Strings
  names.add("user1");
  
  List<Integer> nums = new ArrayList<> ();// can add only Integer
  nums.add(245);
 
  List<Float> sals = new ArrayList<> ();// can add only Float
  sals.add(1313.131313f)
  

  
  -> Generics is used for all the collections ..
  -> write code in-dependent of the datatype
   ->Write code once and apply for any data type..
  
  
Raw list issues:  
---------------
List names = new ArrayList();// add data of any datatype int/float/string/double/long
  names.add("user1");
  names.add(1222);
  names.add(1313.11313f);
  
compile-time type checking
risk of ClassCastException 

 



-> generic method
-> generic class
 
Generic Method:
---------------

Case#1:  [ code without generic ]

1.code for wirting for writing method
public void print(String data) { // can be called by passing only string
		System.out.println(data);
	}
  
2.code for calling methods
 print("hello") ;
 print("kumar");
 print("ram");  
 print1(123); //this wil give compilation
 
 Case#2: [generic method] 
public <E> void print2(E data) { // can be called by passing any datatype, ex: int, string, float..etc..
		System.out.println(data);
	}
  <E>    ---> code is related to generic, E is generic type 
  
     print2(1); // here E will be integer 
     print2(1232.131313f); // here E will be float
     print2("Hellooo"); // here E will be String
    
  
  
<E> – Element (used extensively by the Java Collections 
Framework, for example ArrayList, Set etc.)
<K> – Key (Used in Map)
<V> – Value (Used in Map)
<N> – Number
<T> – Type

    
    
    